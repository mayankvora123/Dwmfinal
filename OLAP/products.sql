-- ===========================
-- DIMENSION TABLES
-- ===========================

-- Time Dimension Table
CREATE TABLE dim_time (
    time_id NUMBER PRIMARY KEY,
    year NUMBER,
    quarter VARCHAR2(20),
    month VARCHAR2(20)
);

-- Product Dimension Table
CREATE TABLE dim_product (
    product_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name VARCHAR2(50),
    category VARCHAR2(50)
);

-- Region Dimension Table
CREATE TABLE dim_region (
    region_id NUMBER PRIMARY KEY,
    region_name VARCHAR2(50),
    zone VARCHAR2(50)
);

-- ===========================
-- FACT TABLE
-- ===========================

-- Sales Fact Table (links to time, product, and region)
CREATE TABLE fact_sales (
    sales_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    time_id NUMBER,
    product_id NUMBER,
    region_id NUMBER,
    FOREIGN KEY (time_id) REFERENCES dim_time(time_id),
    FOREIGN KEY (product_id) REFERENCES dim_product(product_id),
    FOREIGN KEY (region_id) REFERENCES dim_region(region_id)
);

-- ===========================
-- TRIGGER
-- ===========================

-- Automatically insert a sales record into fact_sales
-- when a new product is added, using the latest time and region entries
CREATE OR REPLACE TRIGGER trg_insert_fact_after_product
AFTER INSERT ON dim_product
FOR EACH ROW
DECLARE
  v_time_id   dim_time.time_id%TYPE;
  v_region_id dim_region.region_id%TYPE;
BEGIN
  -- Randomly pick one time_id
  SELECT time_id
  INTO v_time_id
  FROM (
    SELECT time_id FROM dim_time
    ORDER BY DBMS_RANDOM.VALUE
  ) WHERE ROWNUM = 1;

  -- Randomly pick one region_id
  SELECT region_id
  INTO v_region_id
  FROM (
    SELECT region_id FROM dim_region
    ORDER BY DBMS_RANDOM.VALUE
  ) WHERE ROWNUM = 1;

  -- Insert into fact_sales
  INSERT INTO fact_sales(time_id, product_id, region_id)
  VALUES (v_time_id, :NEW.product_id, v_region_id);
END;
/

    
-- ===========================
-- INSERT QUERIES
-- ===========================

-- time_id should be unique and in order
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (1, 2023, 'Q1', 'January');
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (2, 2023, 'Q2', 'April');
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (3, 2023, 'Q3', 'August');
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (4, 2023, 'Q4', 'December');
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (5, 2024, 'Q1', 'January');
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (6, 2024, 'Q2', 'April');
INSERT INTO dim_time (time_id, year, quarter, month) VALUES (7, 2024, 'Q4', 'December');

-- region_id should be unique and not repeated
INSERT INTO dim_region (region_id, region_name, zone) VALUES (1, 'North', 'Zone A');
INSERT INTO dim_region (region_id, region_name, zone) VALUES (2, 'South', 'Zone B');
INSERT INTO dim_region (region_id, region_name, zone) VALUES (3, 'East', 'Zone C');
INSERT INTO dim_region (region_id, region_name, zone) VALUES (4, 'West', 'Zone D');

-- Assuming auto-generated IDs, so no need for product_id
INSERT INTO dim_product (product_name, category) VALUES ('Smartphone', 'Electronics');
INSERT INTO dim_product (product_name, category) VALUES ('Laptop', 'Electronics');
INSERT INTO dim_product (product_name, category) VALUES ('Air Conditioner', 'Electronics');
INSERT INTO dim_product (product_name, category) VALUES ('Washing Machine', 'Home Appliances');
INSERT INTO dim_product (product_name, category) VALUES ('T-Shirt', 'Clothing');
INSERT INTO dim_product (product_name, category) VALUES ('Shoes', 'Footwear');
INSERT INTO dim_product (product_name, category) VALUES ('Refrigerator', 'Appliances');


-- ===========================
-- SELECT QUERIES
-- ===========================

SELECT * FROM fact_sales;
SELECT * FROM dim_product;
SELECT * FROM dim_region;
SELECT * FROM dim_time;


-- ===========================
-- OLAP QUERIES
-- ===========================

-- 1. ROLL-UP: Aggregate sales by year and quarter
SELECT
    dt.year,
    dt.quarter,
    COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
GROUP BY dt.year, dt.quarter
ORDER BY dt.year, dt.quarter;

-- Roll-Up from Quarter to Year
SELECT dt.year, COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
GROUP BY dt.year
ORDER BY dt.year;

-- Roll-Up by Year, Quarter, Product Category
SELECT
    dt.year,
    dt.quarter,
    dp.category,
    COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_product dp ON fs.product_id = dp.product_id
GROUP BY dt.year, dt.quarter, dp.category
ORDER BY dt.year, dt.quarter, dp.category;

-- Roll-Up by Year, Product Category
SELECT
    dt.year,
    dp.category,
    COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_product dp ON fs.product_id = dp.product_id
GROUP BY dt.year, dp.category
ORDER BY dt.year, dp.category;

-- 2. DRILL-DOWN: Aggregate sales by Year to Quarter
SELECT dt.year, dt.quarter, COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
GROUP BY dt.year, dt.quarter
ORDER BY dt.year, dt.quarter;

-- Drill-Down to month
SELECT
    dt.year,
    dt.quarter,
    dt.month,
    COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
GROUP BY dt.year, dt.quarter, dt.month
ORDER BY dt.year, dt.quarter, dt.month;

-- Drill-Down to Product Name & Category by Year/Quarter
SELECT
    dt.year,
    dt.quarter,
    dp.product_name,
    dp.category,
    COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_product dp ON fs.product_id = dp.product_id
GROUP BY dt.year, dt.quarter, dp.product_name, dp.category
ORDER BY dt.year, dt.quarter, dp.category;

-- Drill-Down to Month and Product Details
SELECT
    dt.year,
    dt.quarter,
    dt.month,
    dp.product_name,
    dp.category,
    COUNT(fs.sales_id) AS total_sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_product dp ON fs.product_id = dp.product_id
GROUP BY dt.year, dt.quarter, dt.month, dp.product_name, dp.category
ORDER BY dt.year, dt.quarter, dt.month, dp.category;


-- 3. SLICE: Sales details for the 'South' region
SELECT
    fs.sales_id,
    dp.product_name,
    dt.month,
    dr.region_name
FROM fact_sales fs
JOIN dim_product dp ON fs.product_id = dp.product_id
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_region dr ON fs.region_id = dr.region_id
WHERE dr.region_name = 'South';

SELECT fs.sales_id, dp.product_name, dt.month, dr.region_name
FROM fact_sales fs
JOIN dim_product dp ON fs.product_id = dp.product_id
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_region dr ON fs.region_id = dr.region_id
WHERE dt.year = 2023;


-- 4. DICE: Filter by region = 'North', category = 'Electronics', and year = 2023
SELECT
    fs.sales_id,
    dp.product_name,
    dt.month,
    dr.region_name,
    dp.category,
    dt.year
FROM fact_sales fs
JOIN dim_product dp ON fs.product_id = dp.product_id
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_region dr ON fs.region_id = dr.region_id
WHERE dr.region_name = 'North'
  AND dp.category = 'Electronics'
  AND dt.year = 2023;

-- 5. PIVOT: Monthly sales count for selected months by region
SELECT
  dr.region_name,
  SUM(CASE WHEN dt.month = 'January' THEN 1 ELSE 0 END) AS Jan_Sales,
  SUM(CASE WHEN dt.month = 'April' THEN 1 ELSE 0 END) AS Apr_Sales,
  SUM(CASE WHEN dt.month = 'December' THEN 1 ELSE 0 END) AS Dec_Sales
FROM fact_sales fs
JOIN dim_time dt ON fs.time_id = dt.time_id
JOIN dim_region dr ON fs.region_id = dr.region_id
GROUP BY dr.region_name
ORDER BY dr.region_name;
